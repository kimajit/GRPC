// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/data.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDataClient is the client API for UserData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDataClient interface {
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	GetAllData(ctx context.Context, in *GetAllDataRequest, opts ...grpc.CallOption) (*GetAllDataResponse, error)
	SearchAllData(ctx context.Context, in *SearchAllDataRequest, opts ...grpc.CallOption) (*SearchAllDataResponse, error)
}

type userDataClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDataClient(cc grpc.ClientConnInterface) UserDataClient {
	return &userDataClient{cc}
}

func (c *userDataClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/UserData/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) GetAllData(ctx context.Context, in *GetAllDataRequest, opts ...grpc.CallOption) (*GetAllDataResponse, error) {
	out := new(GetAllDataResponse)
	err := c.cc.Invoke(ctx, "/UserData/GetAllData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) SearchAllData(ctx context.Context, in *SearchAllDataRequest, opts ...grpc.CallOption) (*SearchAllDataResponse, error) {
	out := new(SearchAllDataResponse)
	err := c.cc.Invoke(ctx, "/UserData/SearchAllData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDataServer is the server API for UserData service.
// All implementations must embed UnimplementedUserDataServer
// for forward compatibility
type UserDataServer interface {
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	GetAllData(context.Context, *GetAllDataRequest) (*GetAllDataResponse, error)
	SearchAllData(context.Context, *SearchAllDataRequest) (*SearchAllDataResponse, error)
	mustEmbedUnimplementedUserDataServer()
}

// UnimplementedUserDataServer must be embedded to have forward compatible implementations.
type UnimplementedUserDataServer struct {
}

func (UnimplementedUserDataServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedUserDataServer) GetAllData(context.Context, *GetAllDataRequest) (*GetAllDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllData not implemented")
}
func (UnimplementedUserDataServer) SearchAllData(context.Context, *SearchAllDataRequest) (*SearchAllDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAllData not implemented")
}
func (UnimplementedUserDataServer) mustEmbedUnimplementedUserDataServer() {}

// UnsafeUserDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDataServer will
// result in compilation errors.
type UnsafeUserDataServer interface {
	mustEmbedUnimplementedUserDataServer()
}

func RegisterUserDataServer(s grpc.ServiceRegistrar, srv UserDataServer) {
	s.RegisterService(&UserData_ServiceDesc, srv)
}

func _UserData_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserData/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserData_GetAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServer).GetAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserData/GetAllData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServer).GetAllData(ctx, req.(*GetAllDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserData_SearchAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServer).SearchAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserData/SearchAllData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServer).SearchAllData(ctx, req.(*SearchAllDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserData_ServiceDesc is the grpc.ServiceDesc for UserData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserData",
	HandlerType: (*UserDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _UserData_GetData_Handler,
		},
		{
			MethodName: "GetAllData",
			Handler:    _UserData_GetAllData_Handler,
		},
		{
			MethodName: "SearchAllData",
			Handler:    _UserData_SearchAllData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data.proto",
}
